using Inti
using Documenter
using DocumenterCitations
using DocumenterInterLinks
using ExampleJuggler, Literate, PlutoSliderServer
using Pluto, JuliaFormatter
# packages needed for extensions
using Gmsh
using HMatrices
using Meshes
using GLMakie
using FMM2D
using FMM3D

cleanexamples()

# from https://github.com/fonsp/Pluto.jl/pull/2471
function generate_plaintext(
    notebook,
    strmacrotrim::Union{String,Nothing} = nothing;
    header::Function = _ -> nothing,
    footer::Function = _ -> nothing,
    textcomment::Function = identity,
    codewrapper::Function,
)
    cell_strings = String[]
    header_content = header(notebook)
    isnothing(header_content) || push!(cell_strings, header_content)
    for cell_id in notebook.cell_order
        cell = notebook.cells_dict[cell_id]
        scode = strip(cell.code)
        (raw, ltrim, rtrim) = if isnothing(strmacrotrim)
            false, 0, 0
        elseif startswith(scode, string(strmacrotrim, '"'^3))
            true, length(strmacrotrim) + 3, 3
        elseif startswith(scode, string(strmacrotrim, '"'))
            true, length(strmacrotrim) + 1, 1
        else
            false, 0, 0
        end
        push!(
            cell_strings,
            if raw
                text = strip(
                    scode[nextind(scode, 1, ltrim):prevind(scode, end, rtrim)],
                    ['\n'],
                )
                ifelse(Pluto.is_disabled(cell), textcomment, identity)(text)
            else
                codewrapper(cell, Pluto.is_disabled(cell))
            end,
        )
    end
    footer_content = footer(notebook)
    isnothing(footer_content) || push!(cell_strings, footer_content)
    return join(cell_strings, "\n\n")
end

function generate_md(
    input;
    output = replace(replace(input, r"..$" => "md"), "pluto-examples" => "module_examples"),
)
    notebook = Pluto.load_notebook(input)
    header = _ -> "<!-- Generated by Pluto $(Pluto.PLUTO_VERSION) -->"
    fname = basename(input)
    function codewrapper(cell, _)
        # 1. Strips begin/end block
        # 2. Reformats code using JuliaFormatter
        # 3. Wraps all code in same ```@example``` block for documenter
        code = strip(cell.code)
        if startswith(code, "begin") && endswith(code, "end")
            code = strip(code[6:end-4])  # Remove "begin" and "end" and strip spaces
            # reformat code using JuliaFormatter
            code = format_text(String(code))
        elseif startswith(code, "let") && endswith(code, "end")
            code = strip(code[4:end-4])  # Remove "let" and "end" and strip spaces
            # reformat code using JuliaFormatter
            code = format_text(String(code))
        end
        return if cell.code_folded
            string("```@setup $fname\n", code, "\n```")
        else
            string("```@example $fname\n", code, "\n```")
        end
    end
    textcomment(text) = string("<!-- ", text, " -->")
    str = generate_plaintext(notebook, "md"; header, codewrapper, textcomment)
    open(output, "w") do io
        return write(io, str)
    end
    return output
end

links = InterLinks(
    "Meshes" => "https://juliageometry.github.io/MeshesDocs/dev/objects.inv",
    "HMatrices" => "https://integralequations.github.io/HMatrices.jl/stable/objects.inv",
)

bib = CitationBibliography(joinpath(@__DIR__, "src", "refs.bib"); style = :numeric)

draft = false

const ON_CI = get(ENV, "CI", "false") == "true"
const GIT_HEAD = chomp(read(`git rev-parse HEAD`, String))
const SETUP = """
#nb import Pkg
#nb Pkg.activate(temp=true)
#nb Pkg.add(url="https://github.com/IntegralEquations/Inti.jl", rev="$GIT_HEAD")
#nb foreach(Pkg.add, DEPENDENCIES)
"""

ON_CI && (draft = false) # always full build on CI

function insert_setup(content)
    ON_CI || return content
    return replace(content, "#nb ## __NOTEBOOK_SETUP__" => SETUP)
end

## TO REMOVE if we decide to use Pluto Notebooks to generate documentation
# Generate examples using Literate
# const examples_dir = joinpath(Inti.PROJECT_ROOT, "docs", "src", "examples")
const notebook_dir = joinpath(Inti.PROJECT_ROOT, "docs", "src", "pluto-examples")
# const generated_dir = joinpath(Inti.PROJECT_ROOT, "docs", "src", "examples", "generated")
# const examples = ["toy_example.jl", "helmholtz_scattering.jl"]
# for t in examples
#     println("\n*** Generating $t example")
#     @time begin
#         src = joinpath(examples_dir, t)
#         Literate.markdown(src, generated_dir; mdstrings = true)
#         # if draft, skip creation of notebooks
#         Literate.notebook(
#             src,
#             generated_dir;
#             mdstrings = true,
#             preprocess = insert_setup,
#             # execute = ON_CI,
#             execute = false,
#         )
#     end
# end

println("\n*** Generating documentation")

DocMeta.setdocmeta!(Inti, :DocTestSetup, :(using Inti); recursive = true)

modules = [Inti]
for extension in
    [:IntiGmshExt, :IntiHMatricesExt, :IntiMakieExt, :IntiFMM2DExt, :IntiFMM3DExt]
    ext = Base.get_extension(Inti, extension)
    isnothing(ext) && "error loading $ext"
    push!(modules, ext)
end

size_threshold_ignore = []
notebooks = [
    "Toy example" => "toy_example.jl",
    "Helmholtz scattering" => "helmholtz_scattering.jl",
    "Poisson problem" => "poisson.jl",
]

mkdir(joinpath(Inti.PROJECT_ROOT, "docs", "src", "module_examples"))

notebook_examples = Pair{String,String}[]
for notebook in notebooks
    name, file = notebook
    file_in = joinpath(notebook_dir, file)
    file_out = generate_md(file_in)
    push!(
        notebook_examples,
        name => joinpath("module_examples", replace(file, ".jl" => ".md")),
    )
end
size_threshold_ignore = last.(notebook_examples)

# Generate HTML versions of the notebooks using PlutoSliderServer.jl
# notebook_examples_html = @docplutonotebooks(notebook_dir, notebooks, iframe = true)

makedocs(;
    modules = modules,
    repo = "",
    sitename = "Inti.jl",
    format = Documenter.HTML(;
        prettyurls = ON_CI,
        canonical = "https://IntegralEquations.github.io/Inti.jl",
        size_threshold = 2 * 2^20, # 2 MiB
        size_threshold_warn = 1 * 2^20, # 1 MiB
        sidebar_sitename = false,
        mathengine = MathJax3(),
        size_threshold_ignore,
    ),
    pages = [
        "Home" => "index.md",
        "Tutorials" => [
            "tutorials/getting_started.md",
            "tutorials/geo_and_meshes.md",
            "tutorials/integral_operators.md",
            "tutorials/layer_potentials.md",
            "tutorials/compression_methods.md",
            "tutorials/correction_methods.md",
            "tutorials/solvers.md",
        ],
        # "Examples" => [
        #     "examples/generated/toy_example.md",
        #     "examples/generated/helmholtz_scattering.md",
        #     "examples/poisson.md",
        #     # "examples/generated/lippmann_schwinger.md",
        #     # "examples/generated/poisson.md",
        #     # "examples/generated/stokes_drag.md",
        # ],
        "Notebooks" => notebook_examples,
        "References" => "references.md",
        "Docstrings" => "docstrings.md",
    ],
    warnonly = Documenter.except(:linkcheck_remotes), # ON_CI ? false : Documenter.except(:linkcheck_remotes),
    # warnonly = true,
    pagesonly = true,
    checkdocs = :none,
    clean = false,
    draft,
    plugins = [bib, links],
)

cleanexamples()

deploydocs(;
    repo = "github.com/IntegralEquations/Inti.jl",
    devbranch = "main",
    push_preview = true,
)

# GLMakie.closeall()
